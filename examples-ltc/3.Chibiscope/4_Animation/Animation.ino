// Love to Code

// Animation Demo

// Please refer to the "PositioningText" demo to understand how the
// screen update code works.

// In this advanced example, we show how to draw borders and animate text
// using the ChibiScope. 

// Here we want to fill the screen with a solid set of characters. The screen is
// 18 characters wide, but the "return" symbol (\n) counts as one of them. So
// to fill the screen solid, we print 18 characters; the 19th character will
// wrap automatically to the next line, thus filling in the blank column
// on the right that would be left by the return symbol.
//
// Thus, for this animation, we endeavor to make sure that every line stays
// exactly 18 characters wide. We use a function called "printf" (not typically
// used in Arduino code, but available in LTC) with formatting strings to
// guarantee that the width of the printed string is always the same even
// if the number of digits displayed is less. Refer to
// https://en.wikipedia.org/wiki/Printf_format_string for how this works.
//
// The animation consists of a loop counter, a sensor input value represented
// as a number, and a scrolling "landscape" consisting of characters that
// correspond to the magnitude of the analog sensor value.

// Touch the sensor pin (default 0) to see the sensor value wiggle a bit.

// A mapping of sensor values to characters. Feel free to mix this up.
char landscape_chars[16] = {'_', '.', 'o', 'O', '*', '+', '*', '#', '^', '~',
			    '@', '$', '%', '"', '!', };
char landscape[12];

int counter = 0;
int sensor_pin = 0;

void setup(void) {
  Serial.begin(9600);

  pinMode(0, INPUT); // setup an input to monitor as part of the demo
}

void render_screen() {
  unsigned int i;
  int sensor_value = analogRead(0);

  Serial.println("#LCK"); // enter lock mode -- could also move to setup()

  // note that the \ character indicates the next character is special
  // so to print a \, you must use \\, e.g. "special character: print a \"
  Serial.print("/----------------\\");  // top border
  printf("| Loops: %7d |", counter);    // loop counter
  printf("| Sensor: %6d |", analogRead(sensor_pin)); // sensor value from pin

  // scrolling "landscape" generated by sensor values
  Serial.print("| [");                  // left border of landscape
  for (i = 1; i < sizeof(landscape); i++) {
    landscape[i - 1] = landscape[i];    // shift the landscape left to make a "scrolling" effect
    Serial.write(landscape_chars[landscape[i - 1]]); // update to the screen
  }
  // at the right hand side, drop in new characters mapped to the sensor values
  landscape[sizeof(landscape) - 1] = map(sensor_value, 0, 1023, 0, sizeof(landscape));
  Serial.write(landscape_chars[landscape[sizeof(landscape) - 1]]);
  Serial.print("] |");                  // right border
  
  Serial.print("\\----------------/");  // bottom border
  
  Serial.println("#SYN");  // sync the values to the screen
  delay(30); // mandatory delay to update the screen
}

void loop(void) {
  render_screen();
  
  counter++; 
  delay(80); // adjust to make loop run faster or slower
}


